// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id String @id @default(uuid())
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  role           String // UserRole type
  emailVerified  DateTime?
  phone          String?
  phoneVerified  DateTime?
  firstName      String?
  lastName       String?
  hashedPassword String?
  picture        String?
  sessions       Session[]
  listings       Listing[]
  agency         Agency?       @relation(fields: [agencyId], references: [id])
  agencyId       String?       @unique
  // 
  favorites      Favorite[]
  savedSearches  SavedSearch[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model SavedSearch {
  id                   String   @id @default(uuid())
  // transactionType      String // e.g., rent, sale
  // type                 String // e.g., apartment, house
  // location             String? // general location name
  // municipality         String? // specific area or municipality
  name                 String // user defined name for the search
  // listingsCount        Int      @default(0) // total number of listings
  // newListingsCount     Int      @default(0) // number of new listings since last check
  img                  String? // optional image
  isNotificationOn     Boolean  @default(false) // whether notifications are active
  notificationInterval String // e.g., daily, weekly, etc.
  searchParams         String // URL or string for query params like 'rooms=2&kitchen=3'
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
  userId               String // Foreign key to User
  lastOpenedAt         DateTime @default(now())
}

model Counter {
  id    Int    @id @default(autoincrement())
  name  String @unique
  value Int    @default(1)
}

model Listing {
  // Generated automatically
  id                String     @id @default(uuid())
  externalRef       String?    @unique // External ID for importing data from other sources
  listingNumber     Int        @unique @default(autoincrement()) // 6 digit number  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  isAvailable       Boolean?   @default(true)
  availabilityDate  DateTime? // if it is in the past it is available
  // Required for creation in form
  owner             User       @relation(fields: [userId], references: [id])
  userId            String
  transactionType   String // rent, sale
  category          String // Won't be changed later
  type              String // Can be changed later, different types of the same category
  // Location Step
  municipality      String? // ID of municipality
  place             String? // ID of village or town
  district          String? // ID of naseleno mesto
  address           String? // the name of street and number
  fullAddress       String? // the full address (municipality + place + district + address)
  longitude         Float?
  latitude          Float?
  locationPrecision String? // 'exact', 'approximate', 'wide' | How precise the location is shown on the map
  // Main Characteristics
  title             String?    @default("") // Title that will show up in listing that they wanted
  price             Int?
  previousPrice     Int?
  priceHistory      Json?
  area              Int?
  orientation       String? // 'north', 'south', 'east', 'west', 'north-east', 'north-west', 'south-east', 'south-west'
  floorNumber       Int? // 0 for ground floor, and coded values for others
  // additional to floor
  // isPenthouse       Boolean?  @default(false)
  // isAtCorner        Boolean?  @default(false)
  // levels            Int?
  // rooms
  bedrooms          Int?       @default(0)
  bathrooms         Int?       @default(0)
  wcs               Int?       @default(0)
  kitchens          Int?       @default(0)
  livingRooms       Int?       @default(0)
  // Other features that are on spitogatos
  parking           Boolean? // true = there is, false = there isn't, null = not specified
  elevator          Boolean?
  balcony           Boolean?
  yard              Boolean?
  basement          Boolean?
  // equiped           Boolean?  @default(false)
  // alarm             Boolean?  @default(false)
  // loadingRamp       Boolean?  @default(false)
  // garage            Boolean?  @default(false)
  // secureDoor        Boolean?  @default(false)
  // view              Boolean?  @default(false)
  // zoning            String?
  // roadType          String? // access From?
  // Additional Features & Heating
  // renovated              Boolean?  @default(false)
  // requiresRenovation     Boolean?  @default(false)
  // luxurious              Boolean?  @default(false)
  // underConstruction      Boolean?  @default(false)
  // constructionYear       Int?
  // averageMonthlyExpenses Int? // in euros
  // heatingType            String? // 'autonomous', 'central', 'air-condition', 'none'
  // heatingFuel            String? // 'oil', 'natural gas', 'diesel', 'electricity', 'wood', 'solar', 'geothermal', 'heat pump'
  // additional heating options
  // fireplace         Boolean?  @default(false)
  // solar      Boolean?  @default(false)
  // airCondition           Boolean?  @default(false)
  // underFloorHeating      Boolean?  @default(false)
  // Description
  description       String?    @db.VarChar(5000)
  mkdDescription    String?    @db.VarChar(5000)
  albDescription    String?    @db.VarChar(5000)
  // short description
  // shortDescription  String?
  // Images and Video
  mainImage         String? // img will be hosted elsewhere, used to showcase the listing, usually first image in array
  images            String[]
  videoLink         String? // youtube or vimeo for the property
  // Publishing info
  isArchived        Boolean    @default(false)
  isPublished       Boolean    @default(false) // meaning someone paid for this and its shown unless its hidden
  isVisible         Boolean    @default(true) // user can turn it off/on which is different from isPublished
  publishedAt       DateTime?
  publishEndDate    DateTime? // usually one month after publishedAt
  // Unresolved
  tags              String[]   @default([])
  isPaidPromo       Boolean    @default(false)
  // favourites
  favoritedBy       Favorite[]
  // Unexplained
  // published   Boolean   @default(false)
  // title       String?
  // isLiked      Boolean
  // internalFeatures String[]
  // externalFeatures String[]
  // Not every listing is owned by an Agency, these info will go through user
  // agency           Agency?  @relation(fields: [agencyId], references: [id])
  // agencyId         String?
  contactData       String?    @default("") // JSON with contact data
  // enquirerData      EnquirerData @relation(fields: [enquirerDataId], references: [id])
  // enquirerDataId    String       @unique
  // EnquirerData      EnquirerData[]
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId]) // Ensure a user can't favorite the same listing twice
}

// model EnquirerData {
//   id           String  @id @default(uuid())
//   firstName    String?
//   lastName     String?
//   email        String?
//   phone        String?
//   contactHours String? // "morning", "afternoon", "evening" or hours
// listingId    String
// listing      Listing @relation(fields: [listingId], references: [id])
// }

model Agency {
  id                    String  @id @default(uuid())
  name                  String? @unique
  slug                  String? @unique
  address               String?
  website               String?
  phone                 String?
  logoUrl               String?
  contactPersonFullName String?
  contactPersonEmail    String?
  contactPersonPhone    String?
  workHours             String?

  gpsLocation      String? // lng,lat
  description      String?
  shortDescription String?
  branding         String? // or maybe use it as stringified json
  users            User[]
}
